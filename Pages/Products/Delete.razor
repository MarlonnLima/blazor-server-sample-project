@page "/products/delete/{id:int}"
@inject AppDbContext _context
@inject NavigationManager _navigationManager
<h1>@_model?.Title</h1>

<EditForm Model="_model" OnValidSubmit="HandleSubmitAsync">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3">
		<label for="Title" class="form-label">Title</label>
		<InputText class="form-control" readonly type="text" id="Title" @bind-Value="_model.Title" />
	</div>

	<div class="mb-3">
		<label for="Price" class="form-label">Price</label>
		<InputNumber class="form-control" readonly type="number" id="Price" @bind-Value="_model.Price" />
	</div>

	@if (!string.IsNullOrEmpty(_errorMessage))
	{
		<div class="alert alert-dranger" role="alert">
			@_errorMessage
		</div>
	}

	<button class="btn btn-danger" type="submit">Delete</button>
</EditForm>

@code {
	[Parameter]
	public int Id { get; set; }

	Product? _model = new();
	string? _errorMessage = null;

	protected override async Task OnInitializedAsync()
	{
		_model = await _context.Products
			.AsNoTracking()
			.FirstOrDefaultAsync(p => p.Id == Id);
	}

	async Task HandleSubmitAsync()
	{
		try
		{
			var product = await _context.Products
				.FirstOrDefaultAsync(p => p.Id == _model.Id);

			if (product is null)
				throw new Exception("Product not found");

			_context.Products.Remove(product);
			await _context.SaveChangesAsync();

			_navigationManager.NavigateTo("products");
		}
		catch (Exception ex)
		{
			_errorMessage = "Falha ao deletar os dados";
		}
	}
}